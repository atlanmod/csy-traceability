<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <!--
    Copyright (C) 2018 Clearsy

    This file is part of MockPilot.

    MockPilot is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    MockPilot is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
  <!--
    A RELAX NG compact syntax pattern
    for a substitution.
  -->
  <xs:group name="Substitution">
    <xs:choice>
      <xs:element ref="Bloc_Sub"/>
      <xs:element ref="Skip"/>
      <xs:element ref="Assert_Sub"/>
      <xs:element ref="If_Sub"/>
      <xs:element ref="Becomes_Such_That"/>
      <xs:element ref="Assignement_Sub"/>
      <xs:element ref="Select"/>
      <xs:element ref="Case_Sub"/>
      <xs:element ref="ANY_Sub"/>
      <xs:element ref="LET_Sub"/>
      <xs:element ref="Becomes_In"/>
      <xs:element ref="VAR_IN"/>
      <xs:element ref="Nary_Sub"/>
      <xs:element ref="Operation_Call"/>
      <xs:element ref="While"/>
    </xs:choice>
  </xs:group>
  <xs:element name="Bloc_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:group ref="Substitution"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Skip">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Assert_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Guard"/>
        <xs:element name="Body">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group ref="Substitution"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Guard">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:group ref="Predicate"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="If_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Condition"/>
        <xs:element ref="Then"/>
        <xs:element minOccurs="0" name="Else">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group ref="Substitution"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="elseif" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="Condition">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:group ref="Predicate"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Then">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:group ref="Substitution"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Becomes_Such_That">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Variables"/>
        <xs:element ref="Pred"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Pred">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:group ref="Predicate"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Assignement_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element name="Variables">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group maxOccurs="unbounded" ref="Expression"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Values">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group maxOccurs="unbounded" ref="Expression"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Select">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="When_Clauses"/>
        <xs:element minOccurs="0" name="Else">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group ref="Substitution"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="When_Clauses">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element maxOccurs="unbounded" ref="When"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="When">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Condition"/>
        <xs:element ref="Then"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Case_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Value"/>
        <xs:element ref="Choices"/>
        <xs:element minOccurs="0" name="Else">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:element name="Choice">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element minOccurs="0" ref="Attr"/>
                    <xs:element ref="Then"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Value">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:group ref="Expression"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Choices">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element maxOccurs="unbounded" name="Choice">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:element maxOccurs="unbounded" ref="Value"/>
              <xs:element ref="Then"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ANY_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Variables"/>
        <xs:element ref="Pred"/>
        <xs:element ref="Then"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="LET_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Variables"/>
        <xs:element name="Values">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:element maxOccurs="unbounded" name="Valuation">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element minOccurs="0" ref="Attr"/>
                    <xs:group ref="Expression"/>
                  </xs:sequence>
                  <xs:attribute name="ident" use="required"/>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element ref="Then"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Becomes_In">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Variables"/>
        <xs:element ref="Value"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="VAR_IN">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Variables"/>
        <xs:element name="Body">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group ref="Substitution"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Nary_Sub">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:group maxOccurs="unbounded" ref="Substitution"/>
      </xs:sequence>
      <xs:attribute name="op" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="||"/>
            <xs:enumeration value=";"/>
            <xs:enumeration value="CHOICE"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="Operation_Call">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element name="Name">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:element name="Id" type="Identifier"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="Input_Parameters">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group maxOccurs="unbounded" ref="Expression"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="Output_Parameters">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group maxOccurs="unbounded" ref="Expression"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="While">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element ref="Condition"/>
        <xs:element name="Body">
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" ref="Attr"/>
              <xs:group ref="Substitution"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element ref="Invariant"/>
        <xs:element ref="Variant"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Variables">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="Attr"/>
        <xs:element maxOccurs="unbounded" name="Id" type="Identifier"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
